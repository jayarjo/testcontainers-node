import { ContainerInspectInfo } from "dockerode";
import { Duration } from "node-duration";
import { BoundPorts } from "./bound-ports";
import { Container, Id as ContainerId, InspectResult } from "./container";
import { AuthConfig, BindMode, BuildContext, Command, ContainerName, Dir, DockerClient, EnvKey, EnvValue, ExecResult, HealthCheck, NetworkMode, TmpFs } from "./docker-client";
import { DockerClientFactory, Host } from "./docker-client-factory";
import { Port } from "./port";
import { Image, Tag } from "./repo-tag";
import { OptionalStopOptions, StartedTestContainer, StoppedTestContainer, TestContainer } from "./test-container";
import { Uuid } from "./uuid";
import { WaitStrategy } from "./wait-strategy";
export declare class GenericContainerBuilder {
    private readonly context;
    private readonly uuid;
    private readonly dockerClientFactory;
    private buildArgs;
    constructor(context: BuildContext, uuid?: Uuid, dockerClientFactory?: DockerClientFactory);
    withBuildArg(key: string, value: string): GenericContainerBuilder;
    build(): Promise<GenericContainer>;
}
export declare class GenericContainer implements TestContainer {
    readonly image: Image;
    readonly tag: Tag;
    readonly dockerClientFactory: DockerClientFactory;
    static fromDockerfile(context: BuildContext): GenericContainerBuilder;
    static byName(namePrefix: string, dockerClientFactory?: DockerClientFactory): Promise<StartedGenericContainer>;
    private readonly repoTag;
    private readonly dockerClient;
    private env;
    private networkMode?;
    private ports;
    private mappedPorts;
    private cmd;
    private bindMounts;
    private name?;
    private tmpFs;
    private healthCheck?;
    private waitStrategy?;
    private startupTimeout;
    private useDefaultLogDriver;
    private authConfig?;
    constructor(image: Image, tag?: Tag, dockerClientFactory?: DockerClientFactory);
    start(): Promise<StartedTestContainer>;
    withAuthentication(authConfig: AuthConfig): this;
    withCmd(cmd: Command[]): this;
    withName(name: ContainerName): this;
    withEnv(key: EnvKey, value: EnvValue): this;
    withTmpFs(tmpFs: TmpFs): this;
    withNetworkMode(networkMode: NetworkMode): this;
    withExposedPort(port: Port, mappedPort?: Port): this;
    withExposedPorts(...ports: Port[]): this;
    withBindMount(source: Dir, target: Dir, bindMode?: BindMode): this;
    withHealthCheck(healthCheck: HealthCheck): this;
    withStartupTimeout(startupTimeout: Duration): this;
    withWaitStrategy(waitStrategy: WaitStrategy): this;
    withDefaultLogDriver(): this;
    hasRepoTagLocally(): Promise<boolean>;
    private waitForContainer;
    private getWaitStrategy;
}
declare class StartedGenericContainer implements StartedTestContainer {
    private readonly container;
    private readonly host;
    private readonly boundPorts;
    private readonly name;
    private readonly dockerClient;
    constructor(container: Container, host: Host, boundPorts: BoundPorts, name: ContainerName, dockerClient: DockerClient);
    stop(options?: OptionalStopOptions): Promise<StoppedTestContainer>;
    remove(options?: OptionalStopOptions): Promise<void>;
    getContainerIpAddress(): Host;
    inspect(): Promise<InspectResult>;
    inspectFull(): Promise<ContainerInspectInfo>;
    getMappedPort(port: Port): Port;
    getId(): ContainerId;
    getName(): ContainerName;
    exec(command: Command[]): Promise<ExecResult>;
}
export {};
